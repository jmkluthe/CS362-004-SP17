Testing card Smithy.
Failed 0 tests, passed 100000 tests.
Testing card Smithy complete.

Function 'playEmbargo'
Lines executed:0.00% of 8
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'playMinion'
Lines executed:0.00% of 21
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 7

Function 'playBaron'
Lines executed:93.33% of 30
Branches executed:100.00% of 18
Taken at least once:77.78% of 18
Calls executed:77.78% of 9

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'playAdventurer'
Lines executed:100.00% of 19
Branches executed:100.00% of 14
Taken at least once:100.00% of 14
Calls executed:100.00% of 3

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.29% of 170
Branches executed:15.65% of 147
Taken at least once:2.72% of 147
Calls executed:8.00% of 50

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:71.43% of 14
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:93.55% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:37.81% of 566
Branches executed:36.04% of 419
Taken at least once:26.73% of 419
Calls executed:30.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 84097918 returned 100% blocks executed 100%
 84097918:    8:int compare(const void* a, const void* b) {
 84097918:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
 36269068:   10:    return 1;
 47828850:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
 17885335:   12:    return -1;
 29943515:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 600000 returned 100% blocks executed 100%
   600000:   16:struct gameState* newGame() {
   600000:   17:  struct gameState* g = malloc(sizeof(struct gameState));
   600000:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 300000 returned 100% blocks executed 94%
   300000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   300000:   44:  SelectStream(1);
call    0 returned 100%
   300000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
   300000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   300000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  3300000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
 33000000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
 30000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   300000:   73:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:    {
   149081:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
   150919:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
   150919:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   300000:   87:  if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:    {
   149081:   89:      state->supplyCount[estate] = 8;
   149081:   90:      state->supplyCount[duchy] = 8;
   149081:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
   150919:   95:      state->supplyCount[estate] = 12;
   150919:   96:      state->supplyCount[duchy] = 12;
   150919:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   300000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   300000:  102:  state->supplyCount[silver] = 40;
   300000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  6300000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
 49500000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
 46500000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  3000000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
  1200000:  115:		  if (numPlayers == 2){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   298162:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   301838:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  2400000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  3000000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 43500000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1050919:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
   750919:  140:      state->deckCount[i] = 0;
  3003676:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
  2252757:  143:	  state->deck[i][j] = estate;
  2252757:  144:	  state->deckCount[i]++;
        -:  145:	}
  6007352:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
  5256433:  148:	  state->deck[i][j] = copper;
  5256433:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1050919:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
   750919:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1050919:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   750919:  166:      state->handCount[i] = 0;
   750919:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  8400000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  8100000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   300000:  182:  state->outpostPlayed = 0;
   300000:  183:  state->phase = 0;
   300000:  184:  state->numActions = 1;
   300000:  185:  state->numBuys = 1;
   300000:  186:  state->playedCardCount = 0;
   300000:  187:  state->whoseTurn = 0;
   300000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  1800000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  1500000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
   300000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
   300000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1113179 returned 100% blocks executed 100%
  1113179:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  1113179:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  1113179:  209:  if (state->deckCount[player] < 1)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
   271424:  210:    return -1;
   841755:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 20816916:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
 19133406:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
 19133406:  216:    newDeck[newDeckPos] = state->deck[player][card];
 19133406:  217:    newDeckPos++;
686782134:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
667648728:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 19133406:  221:    state->deckCount[player]--;
        -:  222:  }
 19975161:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
 19133406:  224:    state->deck[player][i] = newDeck[i];
 19133406:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   841755:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 300000 returned 100% blocks executed 73%
   300000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
   300000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
   300000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
   300000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
   300000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
   300000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
   300000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
   300000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
   300000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
   300000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 300000 returned 100% blocks executed 100%
   300000:  315:int handCard(int handPos, struct gameState *state) {
   300000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   300000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 482885 returned 100% blocks executed 100%
   482885:  320:int supplyCount(int card, struct gameState *state) {
   482885:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1500000 returned 100% blocks executed 100%
  1500000:  346:int whoseTurn(struct gameState *state) {
  1500000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 36175924 returned 100% blocks executed 100%
 36175924:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 36175924:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
 11805631:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
 11624216:  534:      state->deck[player][i] = state->discard[player][i];
 11624216:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
   181415:  538:    state->deckCount[player] = state->discardCount[player];
   181415:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   181415:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   181415:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   181415:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   181415:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   181415:  559:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    90579:  560:      return -1;
        -:  561:
    90836:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    90836:  563:    state->deckCount[player]--;
    90836:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
 35994509:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 35994509:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 35994509:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 35994509:  576:    state->deckCount[player]--;
 35994509:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 36085345:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 300000 returned 100% blocks executed 4%
   300000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   300000:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   300000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   300000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   300000:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
   300000:  663:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 33%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
   100000:  666:		return playAdventurer(state);
call    0 returned 100%
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  670:	{
    #####:  671:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  672:	}
        -:  673:			
        -:  674:      //+1 Buy
    #####:  675:      state->numBuys++;
        -:  676:			
        -:  677:      //Each other player draws a card
    #####:  678:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  679:	{
    #####:  680:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  681:	    {
    #####:  682:	      drawCard(i, state);
call    0 never executed
        -:  683:	    }
        -:  684:	}
        -:  685:			
        -:  686:      //put played card in played card pile
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:			
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case feast:
        -:  692:      //gain card with cost up to 5
        -:  693:      //Backup hand
    #####:  694:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  695:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  696:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  697:      }
        -:  698:      //Backup hand
        -:  699:
        -:  700:      //Update Coins for Buy
    #####:  701:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  702:      x = 1;//Condition to loop on
    #####:  703:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  704:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  705:	  if (DEBUG)
        -:  706:	    printf("None of that card left, sorry!\n");
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  710:	  }
        -:  711:	}
    #####:  712:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  713:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  717:	  }
        -:  718:	}
        -:  719:	else{
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:	  }
        -:  724:
    #####:  725:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  726:	  x = 0;//No more buying cards
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
        -:  732:	}
        -:  733:      }     
        -:  734:
        -:  735:      //Reset Hand
    #####:  736:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  737:	state->hand[currentPlayer][i] = temphand[i];
    #####:  738:	temphand[i] = -1;
        -:  739:      }
        -:  740:      //Reset Hand
        -:  741:      			
    #####:  742:      return 0;
        -:  743:			
        -:  744:    case gardens:
    #####:  745:      return -1;
        -:  746:			
        -:  747:    case mine:
    #####:  748:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  749:
    #####:  750:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:		
    #####:  755:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  769:
        -:  770:      //discard trashed card
    #####:  771:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  772:	{
    #####:  773:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  774:	    {
    #####:  775:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  776:	      break;
        -:  777:	    }
        -:  778:	}
        -:  779:			
    #####:  780:      return 0;
        -:  781:			
        -:  782:    case remodel:
    #####:  783:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  784:
    #####:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  786:	{
    #####:  787:	  return -1;
        -:  788:	}
        -:  789:
    #####:  790:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  797:	{
    #####:  798:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  799:	    {
    #####:  800:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  801:	      break;
        -:  802:	    }
        -:  803:	}
        -:  804:
        -:  805:
    #####:  806:      return 0;
        -:  807:		
        -:  808:    case smithy:
        -:  809:      //+3 Cards
   100000:  810:      return playSmithy(state, handPos);	
call    0 returned 100%
        -:  811:    case village:
        -:  812:      //+1 Card
    #####:  813:      drawCard(currentPlayer, state);
call    0 never executed
        -:  814:			
        -:  815:      //+2 Actions
    #####:  816:      state->numActions = state->numActions + 2;
        -:  817:			
        -:  818:      //discard played card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case baron:
   100000:  823:		return playBaron(state, choice1);		
call    0 returned 100%
        -:  824:    case great_hall:
        -:  825:      //+1 Card
    #####:  826:      drawCard(currentPlayer, state);
call    0 never executed
        -:  827:			
        -:  828:      //+1 Actions
    #####:  829:      state->numActions++;
        -:  830:			
        -:  831:      //discard card from hand
    #####:  832:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case minion:
        -:  836:      //+1 action
    #####:  837:      return playMinion(state, handPos, choice1, choice2);	
call    0 never executed
        -:  838:    case steward:
    #####:  839:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  840:	{
        -:  841:	  //+2 cards
    #####:  842:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  844:	}
    #####:  845:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  846:	{
        -:  847:	  //+2 coins
    #####:  848:	  state->coins = state->coins + 2;
        -:  849:	}
        -:  850:      else
        -:  851:	{
        -:  852:	  //trash 2 cards in hand
    #####:  853:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  854:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  855:	}
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case tribute:
    #####:  862:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  863:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  864:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  865:	  state->deckCount[nextPlayer]--;
        -:  866:	}
    #####:  867:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  868:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  869:	  state->discardCount[nextPlayer]--;
        -:  870:	}
        -:  871:	else{
        -:  872:	  //No Card to Reveal
        -:  873:	  if (DEBUG){
        -:  874:	    printf("No cards to reveal\n");
        -:  875:	  }
        -:  876:	}
        -:  877:      }
        -:  878:	    
        -:  879:      else{
    #####:  880:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  882:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  883:	    state->deckCount[nextPlayer]++;
    #####:  884:	    state->discard[nextPlayer][i] = -1;
    #####:  885:	    state->discardCount[nextPlayer]--;
        -:  886:	  }
        -:  887:			    
    #####:  888:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  889:	} 
    #####:  890:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  892:	state->deckCount[nextPlayer]--;
    #####:  893:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  895:	state->deckCount[nextPlayer]--;
        -:  896:      }    
        -:  897:		       
    #####:  898:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  899:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  900:	state->playedCardCount++;
    #####:  901:	tributeRevealedCards[1] = -1;
        -:  902:      }
        -:  903:
    #####:  904:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  905:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  906:	  state->coins += 2;
        -:  907:	}
        -:  908:		    
    #####:  909:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  910:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  912:	}
        -:  913:	else{//Action Card
    #####:  914:	  state->numActions = state->numActions + 2;
        -:  915:	}
        -:  916:      }
        -:  917:	    
    #####:  918:      return 0;
        -:  919:		
        -:  920:    case ambassador:
    #####:  921:      j = 0;		//used to check if player has enough cards to discard
        -:  922:
    #####:  923:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  924:	{
    #####:  925:	  return -1;				
        -:  926:	}
        -:  927:
    #####:  928:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  934:	{
    #####:  935:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  936:	    {
    #####:  937:	      j++;
        -:  938:	    }
        -:  939:	}
    #####:  940:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  941:	{
    #####:  942:	  return -1;				
        -:  943:	}
        -:  944:
        -:  945:      if (DEBUG) 
        -:  946:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  947:
        -:  948:      //increase supply count for choosen card by amount being discarded
    #####:  949:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  950:			
        -:  951:      //each other player gains a copy of revealed card
    #####:  952:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  955:	    {
    #####:  956:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  957:	    }
        -:  958:	}
        -:  959:
        -:  960:      //discard played card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  962:
        -:  963:      //trash copies of cards returned to supply
    #####:  964:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  969:		{
    #####:  970:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  971:		  break;
        -:  972:		}
        -:  973:	    }
        -:  974:	}			
        -:  975:
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case cutpurse:
        -:  979:
    #####:  980:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  986:		{
    #####:  987:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  988:		    {
    #####:  989:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  990:		      break;
        -:  991:		    }
    #####:  992:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  993:		    {
    #####:  994:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
        -:  996:			  if (DEBUG)
        -:  997:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  998:			}	
    #####:  999:		      break;
        -: 1000:		    }		
        -: 1001:		}
        -: 1002:					
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}				
        -: 1006:
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:
        -: 1012:		
        -: 1013:    case embargo: 
        -: 1014:      //+2 Coins
    #####: 1015:      return playEmbargo(state, handPos, choice1);
call    0 never executed
        -: 1016:    case outpost:
        -: 1017:      //set outpost flag
    #####: 1018:      state->outpostPlayed++;
        -: 1019:			
        -: 1020:      //discard card
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case salvager:
        -: 1025:      //+1 buy
    #####: 1026:      state->numBuys++;
        -: 1027:			
    #####: 1028:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
        -: 1030:	  //gain coins equal to trashed card
    #####: 1031:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1032:	  //trash card
    #####: 1033:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1034:	}
        -: 1035:			
        -: 1036:      //discard card
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case sea_hag:
    #####: 1041:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1042:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1043:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1044:	  state->discardCount[i]++;
    #####: 1045:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1046:	}
        -: 1047:      }
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case treasure_map:
        -: 1051:      //search hand for another treasure_map
    #####: 1052:      index = -1;
    #####: 1053:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1056:	    {
    #####: 1057:	      index = i;
    #####: 1058:	      break;
        -: 1059:	    }
        -: 1060:	}
    #####: 1061:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
        -: 1063:	  //trash both treasure cards
    #####: 1064:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1065:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1066:
        -: 1067:	  //gain 4 Gold cards
    #####: 1068:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	    {
    #####: 1070:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1071:	    }
        -: 1072:				
        -: 1073:	  //return success
    #####: 1074:	  return 1;
        -: 1075:	}
        -: 1076:			
        -: 1077:      //no second treasure_map found in hand
    #####: 1078:      return -1;
        -: 1079:    }
        -: 1080:	
    #####: 1081:  return -1;
        -: 1082:}
        -: 1083:
function discardCard called 100000 returned 100% blocks executed 78%
   100000: 1084:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1085:{
        -: 1086:	
        -: 1087:  //if card is not trashed, added to Played pile 
   100000: 1088:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1089:    {
        -: 1090:      //add card to played pile
   100000: 1091:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   100000: 1092:      state->playedCardCount++;
        -: 1093:    }
        -: 1094:	
        -: 1095:  //set played card to -1
   100000: 1096:  state->hand[currentPlayer][handPos] = -1;
        -: 1097:	
        -: 1098:  //remove card from player's hand
   100000: 1099:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1100:    {
        -: 1101:      //reduce number of cards in hand
    #####: 1102:      state->handCount[currentPlayer]--;
        -: 1103:    }
   100000: 1104:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1105:    {
        -: 1106:      //reduce number of cards in hand
    #####: 1107:      state->handCount[currentPlayer]--;
        -: 1108:    }
        -: 1109:  else 	
        -: 1110:    {
        -: 1111:      //replace discarded card with last card in hand
   100000: 1112:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1113:      //set last card to -1
   100000: 1114:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1115:      //reduce number of cards in hand
   100000: 1116:      state->handCount[currentPlayer]--;
        -: 1117:    }
        -: 1118:	
   100000: 1119:  return 0;
        -: 1120:}
        -: 1121:
function gainCard called 95068 returned 100% blocks executed 70%
    95068: 1122:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1123:{
        -: 1124:  //Note: supplyPos is enum of choosen card
        -: 1125:	
        -: 1126:  //check if supply pile is empty (0) or card is not used in game (-1)
    95068: 1127:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1128:    {
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
        -: 1132:  //added card for [whoseTurn] current player:
        -: 1133:  // toFlag = 0 : add to discard
        -: 1134:  // toFlag = 1 : add to deck
        -: 1135:  // toFlag = 2 : add to hand
        -: 1136:
    95068: 1137:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1138:    {
    #####: 1139:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1140:      state->deckCount[player]++;
        -: 1141:    }
    95068: 1142:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:    {
    #####: 1144:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1145:      state->handCount[player]++;
        -: 1146:    }
        -: 1147:  else
        -: 1148:    {
    95068: 1149:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    95068: 1150:      state->discardCount[player]++;
        -: 1151:    }
        -: 1152:	
        -: 1153:  //decrease number in supply pile
    95068: 1154:  state->supplyCount[supplyPos]--;
        -: 1155:	 
    95068: 1156:  return 0;
        -: 1157:}
        -: 1158:
function updateCoins called 600000 returned 100% blocks executed 100%
   600000: 1159:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1160:{
        -: 1161:  int i;
        -: 1162:	
        -: 1163:  //reset coin count
   600000: 1164:  state->coins = 0;
        -: 1165:
        -: 1166:  //add coins for each Treasure card in player's hand
 21298583: 1167:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -: 1168:    {
 20698583: 1169:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1170:	{
  1199941: 1171:	  state->coins += 1;
        -: 1172:	}
 19498642: 1173:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1174:	{
    28149: 1175:	  state->coins += 2;
        -: 1176:	}
 19470493: 1177:      else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1178:	{
    24425: 1179:	  state->coins += 3;
        -: 1180:	}	
        -: 1181:    }	
        -: 1182:
        -: 1183:  //add bonus
   600000: 1184:  state->coins += bonus;
        -: 1185:
   600000: 1186:  return 0;
        -: 1187:}
        -: 1188:
function playAdventurer called 100000 returned 100% blocks executed 100%
   100000: 1189:int playAdventurer(struct gameState *state) {
   100000: 1190:	int z = 0;
   100000: 1191:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1192:	int temphand[MAX_HAND];// moved above the if statement
   100000: 1193:	int drawntreasure=0;
        -: 1194:	int cardDrawn;
        -: 1195:
 34485347: 1196:	while(drawntreasure < 2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 34375924: 1197:		if(state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   180845: 1198:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1199:		}
        -: 1200:
        -: 1201:		//bug fix (section below doesn't deal with not enough treasures)
 34375924: 1202:		if(drawCard(currentPlayer, state) == -1)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
    90577: 1203:			break;
        -: 1204:		//original code that doesn't check if deck + discard is empty
        -: 1205:		//drawCard(currentPlayer, state);
 34285347: 1206:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1207:	    //this section results in an infinite loop / segfault if there aren't enough treasures to draw
 34285347: 1208:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
    18903: 1209:			drawntreasure++;
        -: 1210:		else {
 34266444: 1211:			temphand[z] = cardDrawn;
 34266444: 1212:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
 34266444: 1213:			z++;
        -: 1214:		}
        -: 1215:		//end of section causing infinite loop segfault
        -: 1216:	}
        -: 1217:		  	
        -: 1218:	//replace good code with bug
        -: 1219:	//good code
        -: 1220:    //while(z - 1 >= 0) {
        -: 1221:	//	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];  //discard all cards in play that have been drawn
        -: 1222:	//	z = z - 1;
        -: 1223:    //}
        -: 1224:	//bug
 34566444: 1225:    while(z >= 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 34366444: 1226:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z]; // discard all cards in play that have been drawn
 34366444: 1227:		z = z - 1;
        -: 1228:    }
   100000: 1229:	return 0;
        -: 1230:	
        -: 1231:}
        -: 1232:
function playSmithy called 100000 returned 100% blocks executed 100%
   100000: 1233:int playSmithy(struct gameState *state, int handPos) {
   100000: 1234:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1235:	int i;
        -: 1236:	
   400000: 1237:	for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
   300000: 1238:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1239:	}
        -: 1240:			
        -: 1241:	//discard card from hand
        -: 1242:	//replace good code with bug
        -: 1243:	//good code	
        -: 1244:	//discardCard(handPos, currentPlayer, state, 0);
        -: 1245:	//bug
   100000: 1246:	discardCard(handPos - 1, currentPlayer, state, 0);
call    0 returned 100%
   100000: 1247:	return 0;
        -: 1248:}
        -: 1249:
function playBaron called 100000 returned 100% blocks executed 93%
   100000: 1250:int playBaron(struct gameState *state, int choice1) {
        -: 1251:	
   100000: 1252:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1253:	
   100000: 1254:	state->numBuys++;//Increase buys by 1!
   100000: 1255:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    50083: 1256:	int p = 0;//Iterator for hand!
    50083: 1257:	int card_not_discarded = 1;//Flag for discard set!
  3199117: 1258:	while(card_not_discarded){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
  3098951: 1259:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     4932: 1260:	    state->coins += 4;//Add 4 coins to the amount of coins
     4932: 1261:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     4932: 1262:	    state->discardCount[currentPlayer]++;
   168745: 1263:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
   163813: 1264:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1265:	    }
     4932: 1266:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     4932: 1267:	    state->handCount[currentPlayer]--;
     4932: 1268:	    card_not_discarded = 0;//Exit the loop
        -: 1269:	  }
  3094019: 1270:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1271:	    if(DEBUG) {
        -: 1272:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1273:	      printf("Must gain an estate if there are any\n");
        -: 1274:	    }
    45151: 1275:	    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    45151: 1276:	      gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
    45151: 1277:	      state->supplyCount[estate]--;//Decrement estates
    45151: 1278:	      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1279:		isGameOver(state);
call    0 never executed
        -: 1280:	      }
        -: 1281:	    }
    45151: 1282:	    card_not_discarded = 0;//Exit the loop
        -: 1283:	  }
        -: 1284:			    
        -: 1285:	  else{
  3048868: 1286:	    p++;//Next card
        -: 1287:	  }
        -: 1288:	}
        -: 1289:      }
        -: 1290:			    
        -: 1291:      else{
    49917: 1292:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    49917: 1293:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
    49917: 1294:	  state->supplyCount[estate]--;//Decrement Estates
    49917: 1295:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1296:	    isGameOver(state);
call    0 never executed
        -: 1297:	  }
        -: 1298:	}
        -: 1299:      }
        -: 1300:	    
        -: 1301:      
   100000: 1302:      return 0;
        -: 1303:}
        -: 1304:
function playMinion called 0 returned 0% blocks executed 0%
    #####: 1305:int playMinion(struct gameState *state, int handPos, int choice1, int choice2) {
        -: 1306:      
    #####: 1307:      int i = 0;
    #####: 1308:      int j = 0;
    #####: 1309:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1310:      
    #####: 1311:      state->numActions++;
        -: 1312:			
        -: 1313:      //discard card from hand
    #####: 1314:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1315:			
    #####: 1316:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1317:	{
    #####: 1318:	  state->coins = state->coins + 2;
        -: 1319:	}
        -: 1320:			
    #####: 1321:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1322:	{
        -: 1323:	  //discard hand
    #####: 1324:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1325:	    {
    #####: 1326:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1327:	    }
        -: 1328:				
        -: 1329:	  //draw 4
        -: 1330:	  //replace good code with bug
        -: 1331:		//good code
        -: 1332:	  //for (i = 0; i < 4; i++)
        -: 1333:		//bug
    #####: 1334:	  for (i = 0; i <= 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	    {
    #####: 1336:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	    }
        -: 1338:				
        -: 1339:	  //other players discard hand and redraw if hand size > 4
    #####: 1340:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1341:	    {
    #####: 1342:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1343:		{
    #####: 1344:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1345:		    {
        -: 1346:		      //discard hand
    #####: 1347:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1348:			{
    #####: 1349:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1350:			}
        -: 1351:							
        -: 1352:		      //draw 4
    #####: 1353:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1354:			{
    #####: 1355:			  drawCard(i, state);
call    0 never executed
        -: 1356:			}
        -: 1357:		    }
        -: 1358:		}
        -: 1359:	    }
        -: 1360:				
        -: 1361:	}
    #####: 1362:      return 0;
        -: 1363:}		
        -: 1364:
function playEmbargo called 0 returned 0% blocks executed 0%
    #####: 1365:int playEmbargo(struct gameState *state, int handPos, int choice1) {
        -: 1366:      
    #####: 1367:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1368:      
    #####: 1369:      state->coins = state->coins + 2;
        -: 1370:			
        -: 1371:      //see if selected pile is in play
    #####: 1372:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1373:	{
    #####: 1374:	  return -1;
        -: 1375:	}
        -: 1376:			
        -: 1377:      //add embargo token to selected supply pile
    #####: 1378:      state->embargoTokens[choice1]++;
        -: 1379:			
        -: 1380:      //trash card
        -: 1381:      //replace good code with bug
        -: 1382:		//good code
        -: 1383:      //discardCard(handPos, currentPlayer, state, 1);
        -: 1384:		//bug
    #####: 1385:      discardCard(handPos, currentPlayer, state, 0);		
call    0 never executed
    #####: 1386:      return 0;
        -: 1387:}
        -: 1388:
        -: 1389:
        -: 1390://end of dominion.c
        -: 1391:
File 'dominion.c'
Lines executed:37.81% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
 84097918:    8:int compare(const void* a, const void* b) {
 84097918:    9:  if (*(int*)a > *(int*)b)
 36269068:   10:    return 1;
 47828850:   11:  if (*(int*)a < *(int*)b)
 17885335:   12:    return -1;
 29943515:   13:  return 0;
        -:   14:}
        -:   15:
   600000:   16:struct gameState* newGame() {
   600000:   17:  struct gameState* g = malloc(sizeof(struct gameState));
   600000:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
   300000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   300000:   44:  SelectStream(1);
   300000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   300000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   300000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  3300000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
 33000000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
 30000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   300000:   73:  if (numPlayers == 2)
        -:   74:    {
   149081:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
   150919:   77:  else if (numPlayers == 3)
        -:   78:    {
   150919:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   300000:   87:  if (numPlayers == 2)
        -:   88:    {
   149081:   89:      state->supplyCount[estate] = 8;
   149081:   90:      state->supplyCount[duchy] = 8;
   149081:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
   150919:   95:      state->supplyCount[estate] = 12;
   150919:   96:      state->supplyCount[duchy] = 12;
   150919:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   300000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   300000:  102:  state->supplyCount[silver] = 40;
   300000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  6300000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
 49500000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
 46500000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  3000000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
  1200000:  115:		  if (numPlayers == 2){ 
   298162:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   301838:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
  2400000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  3000000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 43500000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1050919:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   750919:  140:      state->deckCount[i] = 0;
  3003676:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
  2252757:  143:	  state->deck[i][j] = estate;
  2252757:  144:	  state->deckCount[i]++;
        -:  145:	}
  6007352:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
  5256433:  148:	  state->deck[i][j] = copper;
  5256433:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1050919:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   750919:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1050919:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   750919:  166:      state->handCount[i] = 0;
   750919:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  8400000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  8100000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   300000:  182:  state->outpostPlayed = 0;
   300000:  183:  state->phase = 0;
   300000:  184:  state->numActions = 1;
   300000:  185:  state->numBuys = 1;
   300000:  186:  state->playedCardCount = 0;
   300000:  187:  state->whoseTurn = 0;
   300000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  1800000:  192:  for (it = 0; it < 5; it++){
  1500000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
   300000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   300000:  198:  return 0;
        -:  199:}
        -:  200:
  1113179:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  1113179:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  1113179:  209:  if (state->deckCount[player] < 1)
   271424:  210:    return -1;
   841755:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 20816916:  214:  while (state->deckCount[player] > 0) {
 19133406:  215:    card = floor(Random() * state->deckCount[player]);
 19133406:  216:    newDeck[newDeckPos] = state->deck[player][card];
 19133406:  217:    newDeckPos++;
686782134:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
667648728:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 19133406:  221:    state->deckCount[player]--;
        -:  222:  }
 19975161:  223:  for (i = 0; i < newDeckPos; i++) {
 19133406:  224:    state->deck[player][i] = newDeck[i];
 19133406:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   841755:  228:  return 0;
        -:  229:}
        -:  230:
   300000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
   300000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
   300000:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
   300000:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
   300000:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
   300000:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
   300000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
   300000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
   300000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
   300000:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   300000:  315:int handCard(int handPos, struct gameState *state) {
   300000:  316:  int currentPlayer = whoseTurn(state);
   300000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
   482885:  320:int supplyCount(int card, struct gameState *state) {
   482885:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
  1500000:  346:int whoseTurn(struct gameState *state) {
  1500000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
 36175924:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 36175924:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
 11805631:  533:    for (i = 0; i < state->discardCount[player];i++){
 11624216:  534:      state->deck[player][i] = state->discard[player][i];
 11624216:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
   181415:  538:    state->deckCount[player] = state->discardCount[player];
   181415:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   181415:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   181415:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   181415:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   181415:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   181415:  559:    if (deckCounter == 0)
    90579:  560:      return -1;
        -:  561:
    90836:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    90836:  563:    state->deckCount[player]--;
    90836:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
 35994509:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 35994509:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 35994509:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 35994509:  576:    state->deckCount[player]--;
 35994509:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 36085345:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
   300000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   300000:  653:  int currentPlayer = whoseTurn(state);
   300000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   300000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   300000:  658:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
   300000:  663:  switch( card ) 
        -:  664:    {
        -:  665:    case adventurer:
   100000:  666:		return playAdventurer(state);
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      for (i = 0; i < 4; i++)
        -:  670:	{
    #####:  671:	  drawCard(currentPlayer, state);
        -:  672:	}
        -:  673:			
        -:  674:      //+1 Buy
    #####:  675:      state->numBuys++;
        -:  676:			
        -:  677:      //Each other player draws a card
    #####:  678:      for (i = 0; i < state->numPlayers; i++)
        -:  679:	{
    #####:  680:	  if ( i != currentPlayer )
        -:  681:	    {
    #####:  682:	      drawCard(i, state);
        -:  683:	    }
        -:  684:	}
        -:  685:			
        -:  686:      //put played card in played card pile
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
        -:  688:			
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case feast:
        -:  692:      //gain card with cost up to 5
        -:  693:      //Backup hand
    #####:  694:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  695:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  696:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  697:      }
        -:  698:      //Backup hand
        -:  699:
        -:  700:      //Update Coins for Buy
    #####:  701:      updateCoins(currentPlayer, state, 5);
    #####:  702:      x = 1;//Condition to loop on
    #####:  703:      while( x == 1) {//Buy one card
    #####:  704:	if (supplyCount(choice1, state) <= 0){
        -:  705:	  if (DEBUG)
        -:  706:	    printf("None of that card left, sorry!\n");
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  710:	  }
        -:  711:	}
    #####:  712:	else if (state->coins < getCost(choice1)){
    #####:  713:	  printf("That card is too expensive!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  717:	  }
        -:  718:	}
        -:  719:	else{
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:	  }
        -:  724:
    #####:  725:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  726:	  x = 0;//No more buying cards
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
        -:  732:	}
        -:  733:      }     
        -:  734:
        -:  735:      //Reset Hand
    #####:  736:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  737:	state->hand[currentPlayer][i] = temphand[i];
    #####:  738:	temphand[i] = -1;
        -:  739:      }
        -:  740:      //Reset Hand
        -:  741:      			
    #####:  742:      return 0;
        -:  743:			
        -:  744:    case gardens:
    #####:  745:      return -1;
        -:  746:			
        -:  747:    case mine:
    #####:  748:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  749:
    #####:  750:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:		
    #####:  755:      if (choice2 > treasure_map || choice2 < curse)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      gainCard(choice2, state, 2, currentPlayer);
        -:  766:
        -:  767:      //discard card from hand
    #####:  768:      discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        -:  770:      //discard trashed card
    #####:  771:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  772:	{
    #####:  773:	  if (state->hand[currentPlayer][i] == j)
        -:  774:	    {
    #####:  775:	      discardCard(i, currentPlayer, state, 0);			
    #####:  776:	      break;
        -:  777:	    }
        -:  778:	}
        -:  779:			
    #####:  780:      return 0;
        -:  781:			
        -:  782:    case remodel:
    #####:  783:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  784:
    #####:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  786:	{
    #####:  787:	  return -1;
        -:  788:	}
        -:  789:
    #####:  790:      gainCard(choice2, state, 0, currentPlayer);
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
        -:  794:
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  797:	{
    #####:  798:	  if (state->hand[currentPlayer][i] == j)
        -:  799:	    {
    #####:  800:	      discardCard(i, currentPlayer, state, 0);			
    #####:  801:	      break;
        -:  802:	    }
        -:  803:	}
        -:  804:
        -:  805:
    #####:  806:      return 0;
        -:  807:		
        -:  808:    case smithy:
        -:  809:      //+3 Cards
   100000:  810:      return playSmithy(state, handPos);	
        -:  811:    case village:
        -:  812:      //+1 Card
    #####:  813:      drawCard(currentPlayer, state);
        -:  814:			
        -:  815:      //+2 Actions
    #####:  816:      state->numActions = state->numActions + 2;
        -:  817:			
        -:  818:      //discard played card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case baron:
   100000:  823:		return playBaron(state, choice1);		
        -:  824:    case great_hall:
        -:  825:      //+1 Card
    #####:  826:      drawCard(currentPlayer, state);
        -:  827:			
        -:  828:      //+1 Actions
    #####:  829:      state->numActions++;
        -:  830:			
        -:  831:      //discard card from hand
    #####:  832:      discardCard(handPos, currentPlayer, state, 0);
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case minion:
        -:  836:      //+1 action
    #####:  837:      return playMinion(state, handPos, choice1, choice2);	
        -:  838:    case steward:
    #####:  839:      if (choice1 == 1)
        -:  840:	{
        -:  841:	  //+2 cards
    #####:  842:	  drawCard(currentPlayer, state);
    #####:  843:	  drawCard(currentPlayer, state);
        -:  844:	}
    #####:  845:      else if (choice1 == 2)
        -:  846:	{
        -:  847:	  //+2 coins
    #####:  848:	  state->coins = state->coins + 2;
        -:  849:	}
        -:  850:      else
        -:  851:	{
        -:  852:	  //trash 2 cards in hand
    #####:  853:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  854:	  discardCard(choice3, currentPlayer, state, 1);
        -:  855:	}
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case tribute:
    #####:  862:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  863:	if (state->deckCount[nextPlayer] > 0){
    #####:  864:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  865:	  state->deckCount[nextPlayer]--;
        -:  866:	}
    #####:  867:	else if (state->discardCount[nextPlayer] > 0){
    #####:  868:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  869:	  state->discardCount[nextPlayer]--;
        -:  870:	}
        -:  871:	else{
        -:  872:	  //No Card to Reveal
        -:  873:	  if (DEBUG){
        -:  874:	    printf("No cards to reveal\n");
        -:  875:	  }
        -:  876:	}
        -:  877:      }
        -:  878:	    
        -:  879:      else{
    #####:  880:	if (state->deckCount[nextPlayer] == 0){
    #####:  881:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  882:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  883:	    state->deckCount[nextPlayer]++;
    #####:  884:	    state->discard[nextPlayer][i] = -1;
    #####:  885:	    state->discardCount[nextPlayer]--;
        -:  886:	  }
        -:  887:			    
    #####:  888:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  889:	} 
    #####:  890:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  892:	state->deckCount[nextPlayer]--;
    #####:  893:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  895:	state->deckCount[nextPlayer]--;
        -:  896:      }    
        -:  897:		       
    #####:  898:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  899:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  900:	state->playedCardCount++;
    #####:  901:	tributeRevealedCards[1] = -1;
        -:  902:      }
        -:  903:
    #####:  904:      for (i = 0; i <= 2; i ++){
    #####:  905:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  906:	  state->coins += 2;
        -:  907:	}
        -:  908:		    
    #####:  909:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
        -:  913:	else{//Action Card
    #####:  914:	  state->numActions = state->numActions + 2;
        -:  915:	}
        -:  916:      }
        -:  917:	    
    #####:  918:      return 0;
        -:  919:		
        -:  920:    case ambassador:
    #####:  921:      j = 0;		//used to check if player has enough cards to discard
        -:  922:
    #####:  923:      if (choice2 > 2 || choice2 < 0)
        -:  924:	{
    #####:  925:	  return -1;				
        -:  926:	}
        -:  927:
    #####:  928:      if (choice1 == handPos)
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  934:	{
    #####:  935:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  936:	    {
    #####:  937:	      j++;
        -:  938:	    }
        -:  939:	}
    #####:  940:      if (j < choice2)
        -:  941:	{
    #####:  942:	  return -1;				
        -:  943:	}
        -:  944:
        -:  945:      if (DEBUG) 
        -:  946:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  947:
        -:  948:      //increase supply count for choosen card by amount being discarded
    #####:  949:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  950:			
        -:  951:      //each other player gains a copy of revealed card
    #####:  952:      for (i = 0; i < state->numPlayers; i++)
        -:  953:	{
    #####:  954:	  if (i != currentPlayer)
        -:  955:	    {
    #####:  956:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  957:	    }
        -:  958:	}
        -:  959:
        -:  960:      //discard played card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);			
        -:  962:
        -:  963:      //trash copies of cards returned to supply
    #####:  964:      for (j = 0; j < choice2; j++)
        -:  965:	{
    #####:  966:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  967:	    {
    #####:  968:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  969:		{
    #####:  970:		  discardCard(i, currentPlayer, state, 1);
    #####:  971:		  break;
        -:  972:		}
        -:  973:	    }
        -:  974:	}			
        -:  975:
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case cutpurse:
        -:  979:
    #####:  980:      updateCoins(currentPlayer, state, 2);
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
        -:  984:	    {
    #####:  985:	      for (j = 0; j < state->handCount[i]; j++)
        -:  986:		{
    #####:  987:		  if (state->hand[i][j] == copper)
        -:  988:		    {
    #####:  989:		      discardCard(j, i, state, 0);
    #####:  990:		      break;
        -:  991:		    }
    #####:  992:		  if (j == state->handCount[i])
        -:  993:		    {
    #####:  994:		      for (k = 0; k < state->handCount[i]; k++)
        -:  995:			{
        -:  996:			  if (DEBUG)
        -:  997:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  998:			}	
    #####:  999:		      break;
        -: 1000:		    }		
        -: 1001:		}
        -: 1002:					
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}				
        -: 1006:
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:
        -: 1012:		
        -: 1013:    case embargo: 
        -: 1014:      //+2 Coins
    #####: 1015:      return playEmbargo(state, handPos, choice1);
        -: 1016:    case outpost:
        -: 1017:      //set outpost flag
    #####: 1018:      state->outpostPlayed++;
        -: 1019:			
        -: 1020:      //discard card
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case salvager:
        -: 1025:      //+1 buy
    #####: 1026:      state->numBuys++;
        -: 1027:			
    #####: 1028:      if (choice1)
        -: 1029:	{
        -: 1030:	  //gain coins equal to trashed card
    #####: 1031:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1032:	  //trash card
    #####: 1033:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1034:	}
        -: 1035:			
        -: 1036:      //discard card
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case sea_hag:
    #####: 1041:      for (i = 0; i < state->numPlayers; i++){
    #####: 1042:	if (i != currentPlayer){
    #####: 1043:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1044:	  state->discardCount[i]++;
    #####: 1045:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1046:	}
        -: 1047:      }
    #####: 1048:      return 0;
        -: 1049:		
        -: 1050:    case treasure_map:
        -: 1051:      //search hand for another treasure_map
    #####: 1052:      index = -1;
    #####: 1053:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1054:	{
    #####: 1055:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1056:	    {
    #####: 1057:	      index = i;
    #####: 1058:	      break;
        -: 1059:	    }
        -: 1060:	}
    #####: 1061:      if (index > -1)
        -: 1062:	{
        -: 1063:	  //trash both treasure cards
    #####: 1064:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1065:	  discardCard(index, currentPlayer, state, 1);
        -: 1066:
        -: 1067:	  //gain 4 Gold cards
    #####: 1068:	  for (i = 0; i < 4; i++)
        -: 1069:	    {
    #####: 1070:	      gainCard(gold, state, 1, currentPlayer);
        -: 1071:	    }
        -: 1072:				
        -: 1073:	  //return success
    #####: 1074:	  return 1;
        -: 1075:	}
        -: 1076:			
        -: 1077:      //no second treasure_map found in hand
    #####: 1078:      return -1;
        -: 1079:    }
        -: 1080:	
    #####: 1081:  return -1;
        -: 1082:}
        -: 1083:
   100000: 1084:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1085:{
        -: 1086:	
        -: 1087:  //if card is not trashed, added to Played pile 
   100000: 1088:  if (trashFlag < 1)
        -: 1089:    {
        -: 1090:      //add card to played pile
   100000: 1091:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   100000: 1092:      state->playedCardCount++;
        -: 1093:    }
        -: 1094:	
        -: 1095:  //set played card to -1
   100000: 1096:  state->hand[currentPlayer][handPos] = -1;
        -: 1097:	
        -: 1098:  //remove card from player's hand
   100000: 1099:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1100:    {
        -: 1101:      //reduce number of cards in hand
    #####: 1102:      state->handCount[currentPlayer]--;
        -: 1103:    }
   100000: 1104:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1105:    {
        -: 1106:      //reduce number of cards in hand
    #####: 1107:      state->handCount[currentPlayer]--;
        -: 1108:    }
        -: 1109:  else 	
        -: 1110:    {
        -: 1111:      //replace discarded card with last card in hand
   100000: 1112:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1113:      //set last card to -1
   100000: 1114:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1115:      //reduce number of cards in hand
   100000: 1116:      state->handCount[currentPlayer]--;
        -: 1117:    }
        -: 1118:	
   100000: 1119:  return 0;
        -: 1120:}
        -: 1121:
    95068: 1122:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1123:{
        -: 1124:  //Note: supplyPos is enum of choosen card
        -: 1125:	
        -: 1126:  //check if supply pile is empty (0) or card is not used in game (-1)
    95068: 1127:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1128:    {
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
        -: 1132:  //added card for [whoseTurn] current player:
        -: 1133:  // toFlag = 0 : add to discard
        -: 1134:  // toFlag = 1 : add to deck
        -: 1135:  // toFlag = 2 : add to hand
        -: 1136:
    95068: 1137:  if (toFlag == 1)
        -: 1138:    {
    #####: 1139:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1140:      state->deckCount[player]++;
        -: 1141:    }
    95068: 1142:  else if (toFlag == 2)
        -: 1143:    {
    #####: 1144:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1145:      state->handCount[player]++;
        -: 1146:    }
        -: 1147:  else
        -: 1148:    {
    95068: 1149:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    95068: 1150:      state->discardCount[player]++;
        -: 1151:    }
        -: 1152:	
        -: 1153:  //decrease number in supply pile
    95068: 1154:  state->supplyCount[supplyPos]--;
        -: 1155:	 
    95068: 1156:  return 0;
        -: 1157:}
        -: 1158:
   600000: 1159:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1160:{
        -: 1161:  int i;
        -: 1162:	
        -: 1163:  //reset coin count
   600000: 1164:  state->coins = 0;
        -: 1165:
        -: 1166:  //add coins for each Treasure card in player's hand
 21298583: 1167:  for (i = 0; i < state->handCount[player]; i++)
        -: 1168:    {
 20698583: 1169:      if (state->hand[player][i] == copper)
        -: 1170:	{
  1199941: 1171:	  state->coins += 1;
        -: 1172:	}
 19498642: 1173:      else if (state->hand[player][i] == silver)
        -: 1174:	{
    28149: 1175:	  state->coins += 2;
        -: 1176:	}
 19470493: 1177:      else if (state->hand[player][i] == gold)
        -: 1178:	{
    24425: 1179:	  state->coins += 3;
        -: 1180:	}	
        -: 1181:    }	
        -: 1182:
        -: 1183:  //add bonus
   600000: 1184:  state->coins += bonus;
        -: 1185:
   600000: 1186:  return 0;
        -: 1187:}
        -: 1188:
   100000: 1189:int playAdventurer(struct gameState *state) {
   100000: 1190:	int z = 0;
   100000: 1191:	int currentPlayer = whoseTurn(state);
        -: 1192:	int temphand[MAX_HAND];// moved above the if statement
   100000: 1193:	int drawntreasure=0;
        -: 1194:	int cardDrawn;
        -: 1195:
 34485347: 1196:	while(drawntreasure < 2) {
 34375924: 1197:		if(state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
   180845: 1198:			shuffle(currentPlayer, state);
        -: 1199:		}
        -: 1200:
        -: 1201:		//bug fix (section below doesn't deal with not enough treasures)
 34375924: 1202:		if(drawCard(currentPlayer, state) == -1)
    90577: 1203:			break;
        -: 1204:		//original code that doesn't check if deck + discard is empty
        -: 1205:		//drawCard(currentPlayer, state);
 34285347: 1206:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1207:	    //this section results in an infinite loop / segfault if there aren't enough treasures to draw
 34285347: 1208:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    18903: 1209:			drawntreasure++;
        -: 1210:		else {
 34266444: 1211:			temphand[z] = cardDrawn;
 34266444: 1212:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
 34266444: 1213:			z++;
        -: 1214:		}
        -: 1215:		//end of section causing infinite loop segfault
        -: 1216:	}
        -: 1217:		  	
        -: 1218:	//replace good code with bug
        -: 1219:	//good code
        -: 1220:    //while(z - 1 >= 0) {
        -: 1221:	//	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];  //discard all cards in play that have been drawn
        -: 1222:	//	z = z - 1;
        -: 1223:    //}
        -: 1224:	//bug
 34566444: 1225:    while(z >= 0) {
 34366444: 1226:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z]; // discard all cards in play that have been drawn
 34366444: 1227:		z = z - 1;
        -: 1228:    }
   100000: 1229:	return 0;
        -: 1230:	
        -: 1231:}
        -: 1232:
   100000: 1233:int playSmithy(struct gameState *state, int handPos) {
   100000: 1234:	int currentPlayer = whoseTurn(state);
        -: 1235:	int i;
        -: 1236:	
   400000: 1237:	for (i = 0; i < 3; i++) {
   300000: 1238:		drawCard(currentPlayer, state);
        -: 1239:	}
        -: 1240:			
        -: 1241:	//discard card from hand
        -: 1242:	//replace good code with bug
        -: 1243:	//good code	
        -: 1244:	//discardCard(handPos, currentPlayer, state, 0);
        -: 1245:	//bug
   100000: 1246:	discardCard(handPos - 1, currentPlayer, state, 0);
   100000: 1247:	return 0;
        -: 1248:}
        -: 1249:
   100000: 1250:int playBaron(struct gameState *state, int choice1) {
        -: 1251:	
   100000: 1252:	int currentPlayer = whoseTurn(state);
        -: 1253:	
   100000: 1254:	state->numBuys++;//Increase buys by 1!
   100000: 1255:      if (choice1 > 0){//Boolean true or going to discard an estate
    50083: 1256:	int p = 0;//Iterator for hand!
    50083: 1257:	int card_not_discarded = 1;//Flag for discard set!
  3199117: 1258:	while(card_not_discarded){
  3098951: 1259:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     4932: 1260:	    state->coins += 4;//Add 4 coins to the amount of coins
     4932: 1261:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     4932: 1262:	    state->discardCount[currentPlayer]++;
   168745: 1263:	    for (;p < state->handCount[currentPlayer]; p++){
   163813: 1264:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1265:	    }
     4932: 1266:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     4932: 1267:	    state->handCount[currentPlayer]--;
     4932: 1268:	    card_not_discarded = 0;//Exit the loop
        -: 1269:	  }
  3094019: 1270:	  else if (p > state->handCount[currentPlayer]){
        -: 1271:	    if(DEBUG) {
        -: 1272:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1273:	      printf("Must gain an estate if there are any\n");
        -: 1274:	    }
    45151: 1275:	    if (supplyCount(estate, state) > 0){
    45151: 1276:	      gainCard(estate, state, 0, currentPlayer);
    45151: 1277:	      state->supplyCount[estate]--;//Decrement estates
    45151: 1278:	      if (supplyCount(estate, state) == 0){
    #####: 1279:		isGameOver(state);
        -: 1280:	      }
        -: 1281:	    }
    45151: 1282:	    card_not_discarded = 0;//Exit the loop
        -: 1283:	  }
        -: 1284:			    
        -: 1285:	  else{
  3048868: 1286:	    p++;//Next card
        -: 1287:	  }
        -: 1288:	}
        -: 1289:      }
        -: 1290:			    
        -: 1291:      else{
    49917: 1292:	if (supplyCount(estate, state) > 0){
    49917: 1293:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    49917: 1294:	  state->supplyCount[estate]--;//Decrement Estates
    49917: 1295:	  if (supplyCount(estate, state) == 0){
    #####: 1296:	    isGameOver(state);
        -: 1297:	  }
        -: 1298:	}
        -: 1299:      }
        -: 1300:	    
        -: 1301:      
   100000: 1302:      return 0;
        -: 1303:}
        -: 1304:
    #####: 1305:int playMinion(struct gameState *state, int handPos, int choice1, int choice2) {
        -: 1306:      
    #####: 1307:      int i = 0;
    #####: 1308:      int j = 0;
    #####: 1309:      int currentPlayer = whoseTurn(state);
        -: 1310:      
    #####: 1311:      state->numActions++;
        -: 1312:			
        -: 1313:      //discard card from hand
    #####: 1314:      discardCard(handPos, currentPlayer, state, 0);
        -: 1315:			
    #####: 1316:      if (choice1)		//+2 coins
        -: 1317:	{
    #####: 1318:	  state->coins = state->coins + 2;
        -: 1319:	}
        -: 1320:			
    #####: 1321:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1322:	{
        -: 1323:	  //discard hand
    #####: 1324:	  while(numHandCards(state) > 0)
        -: 1325:	    {
    #####: 1326:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1327:	    }
        -: 1328:				
        -: 1329:	  //draw 4
        -: 1330:	  //replace good code with bug
        -: 1331:		//good code
        -: 1332:	  //for (i = 0; i < 4; i++)
        -: 1333:		//bug
    #####: 1334:	  for (i = 0; i <= 4; i++)
        -: 1335:	    {
    #####: 1336:	      drawCard(currentPlayer, state);
        -: 1337:	    }
        -: 1338:				
        -: 1339:	  //other players discard hand and redraw if hand size > 4
    #####: 1340:	  for (i = 0; i < state->numPlayers; i++)
        -: 1341:	    {
    #####: 1342:	      if (i != currentPlayer)
        -: 1343:		{
    #####: 1344:		  if ( state->handCount[i] > 4 )
        -: 1345:		    {
        -: 1346:		      //discard hand
    #####: 1347:		      while( state->handCount[i] > 0 )
        -: 1348:			{
    #####: 1349:			  discardCard(handPos, i, state, 0);
        -: 1350:			}
        -: 1351:							
        -: 1352:		      //draw 4
    #####: 1353:		      for (j = 0; j < 4; j++)
        -: 1354:			{
    #####: 1355:			  drawCard(i, state);
        -: 1356:			}
        -: 1357:		    }
        -: 1358:		}
        -: 1359:	    }
        -: 1360:				
        -: 1361:	}
    #####: 1362:      return 0;
        -: 1363:}		
        -: 1364:
    #####: 1365:int playEmbargo(struct gameState *state, int handPos, int choice1) {
        -: 1366:      
    #####: 1367:      int currentPlayer = whoseTurn(state);
        -: 1368:      
    #####: 1369:      state->coins = state->coins + 2;
        -: 1370:			
        -: 1371:      //see if selected pile is in play
    #####: 1372:      if ( state->supplyCount[choice1] == -1 )
        -: 1373:	{
    #####: 1374:	  return -1;
        -: 1375:	}
        -: 1376:			
        -: 1377:      //add embargo token to selected supply pile
    #####: 1378:      state->embargoTokens[choice1]++;
        -: 1379:			
        -: 1380:      //trash card
        -: 1381:      //replace good code with bug
        -: 1382:		//good code
        -: 1383:      //discardCard(handPos, currentPlayer, state, 1);
        -: 1384:		//bug
    #####: 1385:      discardCard(handPos, currentPlayer, state, 0);		
    #####: 1386:      return 0;
        -: 1387:}
        -: 1388:
        -: 1389:
        -: 1390://end of dominion.c
        -: 1391:
